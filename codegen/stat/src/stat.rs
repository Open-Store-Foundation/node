// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectDownloaded {
    /// Identifier for the product/platform
    #[prost(enumeration="PlatformId", tag="1")]
    pub platform_id: i32,
    /// Unique identifier for the specific object instance
    #[prost(int64, tag="2")]
    pub object_id: i64,
    /// Type of the object (e.g., App, Theme)
    #[prost(enumeration="ObjTypeId", tag="3")]
    pub obj_type_id: i32,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(string, tag="4")]
    pub artifact_id: ::prost::alloc::string::String,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(int32, tag="5")]
    pub artifact_protocol: i32,
    /// The installed version code (numeric)
    #[prost(int32, tag="6")]
    pub version_code: i32,
    /// The installed version name (display string)
    #[prost(string, tag="7")]
    pub version_name: ::prost::alloc::string::String,
    /// The installed version code (numeric)
    #[prost(int32, tag="8")]
    pub category_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectInstalled {
    /// Identifier for the product/platform
    #[prost(enumeration="PlatformId", tag="1")]
    pub platform_id: i32,
    /// Unique identifier for the specific object instance
    #[prost(int64, tag="2")]
    pub object_id: i64,
    /// Type of the object (e.g., App, Theme)
    #[prost(enumeration="ObjTypeId", tag="3")]
    pub obj_type_id: i32,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(string, tag="4")]
    pub artifact_id: ::prost::alloc::string::String,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(int32, tag="5")]
    pub artifact_protocol: i32,
    /// The installed version code (numeric)
    #[prost(int32, tag="6")]
    pub version_code: i32,
    /// The installed version name (display string)
    #[prost(string, tag="7")]
    pub version_name: ::prost::alloc::string::String,
    /// The installed version code (numeric)
    #[prost(int32, tag="8")]
    pub category_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectUpdated {
    /// Identifier for the product/platform
    #[prost(enumeration="PlatformId", tag="1")]
    pub platform_id: i32,
    /// Unique identifier for the specific object instance
    #[prost(int64, tag="2")]
    pub object_id: i64,
    /// Type of the object (e.g., App, Theme)
    #[prost(enumeration="ObjTypeId", tag="3")]
    pub obj_type_id: i32,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(string, tag="4")]
    pub artifact_id: ::prost::alloc::string::String,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(int32, tag="5")]
    pub artifact_protocol: i32,
    /// The installed version code (numeric)
    #[prost(int32, tag="6")]
    pub version_code: i32,
    /// The installed version name (display string)
    #[prost(string, tag="7")]
    pub version_name: ::prost::alloc::string::String,
    /// The previous version code
    #[prost(int32, tag="8")]
    pub to_version_code: i32,
    /// The new (updated) version code
    #[prost(string, tag="9")]
    pub to_version_name: ::prost::alloc::string::String,
    /// The installed version code (numeric)
    #[prost(int32, tag="10")]
    pub category_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectDeleted {
    /// Identifier for the product/platform
    #[prost(enumeration="PlatformId", tag="1")]
    pub platform_id: i32,
    /// Unique identifier for the specific object instance
    #[prost(int64, tag="2")]
    pub object_id: i64,
    /// Type of the object (e.g., App, Theme)
    #[prost(enumeration="ObjTypeId", tag="3")]
    pub obj_type_id: i32,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(string, tag="4")]
    pub artifact_id: ::prost::alloc::string::String,
    /// Specific identifier for the content itself (e.g., package name, theme ID)
    #[prost(int32, tag="5")]
    pub artifact_protocol: i32,
    /// The installed version code (numeric)
    #[prost(int32, tag="6")]
    pub version_code: i32,
    /// The installed version name (display string)
    #[prost(string, tag="7")]
    pub version_name: ::prost::alloc::string::String,
    /// The installed version code (numeric)
    #[prost(int32, tag="8")]
    pub category_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventWrapper {
    #[prost(oneof="event_wrapper::EventPayload", tags="1, 2, 3, 4")]
    pub event_payload: ::core::option::Option<event_wrapper::EventPayload>,
}
/// Nested message and enum types in `EventWrapper`.
pub mod event_wrapper {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventPayload {
        #[prost(message, tag="1")]
        Downloaded(super::ObjectDownloaded),
        #[prost(message, tag="2")]
        Installed(super::ObjectInstalled),
        #[prost(message, tag="3")]
        Updated(super::ObjectUpdated),
        #[prost(message, tag="4")]
        Deleted(super::ObjectDeleted),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlatformId {
    ProdUnspecified = 0,
    Android = 1,
    Ios = 2,
    Windows = 3,
    Macos = 4,
    Linux = 5,
    Web = 6,
    Cli = 7,
    All = 100,
}
impl PlatformId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProdUnspecified => "PROD_UNSPECIFIED",
            Self::Android => "ANDROID",
            Self::Ios => "IOS",
            Self::Windows => "WINDOWS",
            Self::Macos => "MACOS",
            Self::Linux => "LINUX",
            Self::Web => "WEB",
            Self::Cli => "CLI",
            Self::All => "ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROD_UNSPECIFIED" => Some(Self::ProdUnspecified),
            "ANDROID" => Some(Self::Android),
            "IOS" => Some(Self::Ios),
            "WINDOWS" => Some(Self::Windows),
            "MACOS" => Some(Self::Macos),
            "LINUX" => Some(Self::Linux),
            "WEB" => Some(Self::Web),
            "CLI" => Some(Self::Cli),
            "ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ObjTypeId {
    ObjUnspecified = 0,
    Application = 1,
    Game = 2,
    Site = 3,
}
impl ObjTypeId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ObjUnspecified => "OBJ_UNSPECIFIED",
            Self::Application => "APPLICATION",
            Self::Game => "GAME",
            Self::Site => "SITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OBJ_UNSPECIFIED" => Some(Self::ObjUnspecified),
            "APPLICATION" => Some(Self::Application),
            "GAME" => Some(Self::Game),
            "SITE" => Some(Self::Site),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
