syntax = "proto3";

package stat; // You can change this package name

enum PlatformId {
  PROD_UNSPECIFIED = 0;
  ANDROID = 1;
  IOS = 2;
  WINDOWS = 3;
  MACOS = 4;
  LINUX = 5;
  WEB = 6;
  CLI = 7;
  ALL = 100;
}

enum ObjTypeId {
  OBJ_UNSPECIFIED = 0;
  APPLICATION = 1;
  GAME = 2;
  SITE = 3;
}

message ObjectDownloaded {
  PlatformId platform_id = 1;   // Identifier for the product/platform
  int64 object_id = 2;        // Unique identifier for the specific object instance
  ObjTypeId obj_type_id = 3;        // Type of the object (e.g., App, Theme)
  string artifact_id = 4;      // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 artifact_protocol = 5;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 version_code = 6;     // The installed version code (numeric)
  string version_name = 7;    // The installed version name (display string)
  int32 category_id = 8;     // The installed version code (numeric)
}

message ObjectInstalled {
  PlatformId platform_id = 1;   // Identifier for the product/platform
  int64 object_id = 2;        // Unique identifier for the specific object instance
  ObjTypeId obj_type_id = 3;        // Type of the object (e.g., App, Theme)
  string artifact_id = 4;      // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 artifact_protocol = 5;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 version_code = 6;     // The installed version code (numeric)
  string version_name = 7;    // The installed version name (display string)
  int32 category_id = 8;     // The installed version code (numeric)
}

message ObjectUpdated {
  PlatformId platform_id = 1; // Identifier for the product/platform
  int64 object_id = 2;        // Unique identifier for the specific object instance
  ObjTypeId obj_type_id = 3;  // Type of the object (e.g., App, Theme)
  string artifact_id = 4;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 artifact_protocol = 5;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 version_code = 6;     // The installed version code (numeric)
  string version_name = 7;    // The installed version name (display string)
  int32 to_version_code = 8;  // The previous version code
  string to_version_name = 9; // The new (updated) version code
  int32 category_id = 10;     // The installed version code (numeric)
}

message ObjectDeleted {
  PlatformId platform_id = 1;   // Identifier for the product/platform
  int64 object_id = 2;        // Unique identifier for the specific object instance
  ObjTypeId obj_type_id = 3;        // Type of the object (e.g., App, Theme)
  string artifact_id = 4;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 artifact_protocol = 5;     // Specific identifier for the content itself (e.g., package name, theme ID)
  int32 version_code = 6;     // The installed version code (numeric)
  string version_name = 7;    // The installed version name (display string)
  int32 category_id = 8;     // The installed version code (numeric)
}

message EventWrapper {
  oneof event_payload {
    ObjectDownloaded downloaded = 1;
    ObjectInstalled installed = 2;
    ObjectUpdated updated = 3;
    ObjectDeleted deleted = 4;
  }
}



//enum ErrorPhase {
//  UNSPECIFIED = 0;
//  INFO = 10;
//  RESOLVE = 20;
//  DOWNLOAD = 30;
//  VERIFY = 40;
//  INSTALL = 50;
//}
//
//message ObjectError {
//  PlatformId platform_id = 1;   // Identifier for the product/platform
//  int64 object_id = 2;        // Unique identifier for the object instance encountering the error (might be 0 if ID not yet assigned)
//  ObjectType type = 3;        // Type of the object (e.g., App, Theme)
//  ErrorPhase phase = 4;       // The phase during which the error occurred (e.g., Download, Install)
//  string reason = 5;          // A description of the error
//}
