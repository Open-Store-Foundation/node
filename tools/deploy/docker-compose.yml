version: '3.8'

services:
  admin:
    build:
      dockerfile: Dockerfile.admin
    container_name: osadm
    working_dir: /home
    volumes:
      - ./../../:/home
      - ${VOLUME_DIR}:/home/volume
      - ${CONFIG_DIR}:/home/config
    networks:
      - client
      - oracle
      - validator
    stdin_open: true

  api-client:
    build:
      dockerfile: Dockerfile.service
    container_name: osa
    command: ["./api-client"]
    working_dir: "/app"
    stop_grace_period: 2m
    expose:
      - "8080"
    volumes:
      - ${VOLUME_DIR}/api-client/:/app
    env_file:
      - ${CONFIG_DIR}/api-client/.env
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - AXUM_HTTP_REQUESTS_TOTAL = "api_client_requests"
      - AXUM_HTTP_REQUESTS_DURATION_SECONDS = "api_client_request_duration"
      - AXUM_HTTP_REQUESTS_PENDING = "api_client_requests_pending"
    restart: unless-stopped
    networks:
      - client
    stdin_open: true
    tty: true

  daemon-client:
    build:
      dockerfile: Dockerfile.service
    container_name: osd
    command: ["./daemon-client"]
    working_dir: "/app"
    stop_grace_period: 2m
    volumes:
      - ${VOLUME_DIR}/daemon-client/:/app
    env_file:
      - ${CONFIG_DIR}/daemon-client/.env
    environment:
      - RUST_LOG=${RUST_LOG:-info}
#    restart: unless-stopped
    networks:
      - client
    stdin_open: true
    tty: true

  oracle:
    build:
      dockerfile: Dockerfile.service
    container_name: oso
    command: ["./oracle"]
    working_dir: "/app"
    stop_grace_period: 5m
    volumes:
      - ${VOLUME_DIR}/oracle/:/app
    env_file:
      - ${CONFIG_DIR}/oracle/.env
    environment:
      - RUST_LOG=${RUST_LOG:-info}
#    restart: unless-stopped
    networks:
      - oracle
    stdin_open: true
    tty: true

  validator:
    build:
      dockerfile: Dockerfile.service
    container_name: osv
    command: ["./validator"]
    working_dir: "/app"
    stop_grace_period: 5m
    volumes:
      - ${VOLUME_DIR}/sqlite/:/app/sqlite
      - ${VOLUME_DIR}/validator/:/app
    env_file:
      - ${CONFIG_DIR}/validator/.env
    environment:
      - RUST_LOG=${RUST_LOG:-info}
#    restart: unless-stopped
    networks:
      - validator
    stdin_open: true
    tty: true

  postgres:
    image: postgres:17
    container_name: osp
    stop_grace_period: 1m
    env_file:
      - ${CONFIG_DIR}/postgres/.env
    ports:
      - "5432:5432"
    volumes:
      - ${VOLUME_DIR}/postgres:/var/lib/postgresql/data
    networks:
      - client
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: osr
    stop_grace_period: 30s
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"
    volumes:
      - ${VOLUME_DIR}/redis:/redis
      - ${CONFIG_DIR}/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - client
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    image: nginx:mainline-alpine3.22
    container_name: osn
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${CONFIG_DIR}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${CONFIG_DIR}/nginx:/etc/nginx/templates:ro
      - ${VOLUME_DIR}/certbot/conf:/etc/letsencrypt:ro
      - ${VOLUME_DIR}/certbot/www:/var/www/certbot:ro
      - ${VOLUME_DIR}/nginx/log:/var/log/nginx
    env_file:
      - ${CONFIG_DIR}/nginx/.env
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    networks:
      - client
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s

  certbot:
    image: certbot/certbot:v5.0.0
    container_name: osc
    env_file:
      - ${CONFIG_DIR}/nginx/.env
    volumes:
      - ${VOLUME_DIR}/certbot/conf:/etc/letsencrypt
      - ${VOLUME_DIR}/certbot/www:/var/www/certbot
    command: >
      sh -c 'certonly --webroot --webroot-path=/var/www/certbot --email $$CERTBOT_EMAIL --agree-tos --no-eff-email -d $$DOMAIN_NAME'
    depends_on:
      nginx:
        condition: service_healthy
    profiles:
      - certbot

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.17.1
    container_name: ospexp
    restart: unless-stopped
    env_file:
      - ${CONFIG_DIR}/postgres/.env
#    environment:
#      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitoring
      - client

  node-exporter:
    image: quay.io/prometheus/node-exporter:v1.9.1
    container_name: osnexp
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - '/:/host:ro'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks:
      - monitoring
      - client
      - oracle
      - validator

  grafana-agent:
    image: grafana/agent:v0.44.2
    container_name: grafana-agent
    env_file:
      - ${CONFIG_DIR}/grafana/.env
    volumes:
      - ${CONFIG_DIR}/grafana/agent.yaml:/etc/agent/agent.yaml
    command:
      - '-config.file=/etc/agent/agent.yaml'
      - '-config.expand-env=true'
    restart: unless-stopped
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
    networks:
      - monitoring
      - client

networks:
  client:
    driver: bridge
  oracle:
    driver: bridge
  validator:
    driver: bridge
  monitoring:
    driver: bridge
